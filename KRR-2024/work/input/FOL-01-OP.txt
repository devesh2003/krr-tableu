#---------------------------------------------------------------------
# KEYWORDS and OPERATORS
#---------------------------------------------------------------------
# true false forall exists exactlyone ~ not and or => <= <=>
# ⊤  ⊥  ∀  ∃  ∃!  ~  ¬  ￢  ∧  ∨  ⊃  ⊂  ≡
#---------------------------------------------------------------------
#   ⊤   true
#   ⊥   false
#   ∀   forall
#   ∃   exists
#   ∃!  exactlyone
#   ~   not
#   ¬   not
#   ￢  not
#   ∧   and
#   ∨   or
#   ⊃   =>
#   ⊂   <=
#   ≡   <=>
#---------------------------------------------------------------------
#  Examples from Brachman and Levesque
#  Knowledge Representation and Reasoning
#  Morgan Kaufmann Publichers
#---------------------------------------------------------------------
# Exercise 2.7
#---------------------------------------------------------------------

{
    ∀X,Y,Z (  p(X,Y) ∧ p(Y,Z)  ⊃  p(X,Z) )  ;
    ∀X,Y   (  p(X,Y) ∧ p(Y,X)  ⊃  X = Y  )  ;
    ∀X,Y   (  p(a,Y) ⊃ p(X,b) )  ;
    {
        ∀X∀Y∀Z (  p(X,Y) ∧ p(Y,Z)  ⊃  p(X,Z) )  ;
        ∀X∀Y   (  p(X,Y) ∧ p(Y,X)  ⊃  X = Y  )  ;
        ∀X∀Y   (  p(a,Y) ⊃ p(X,b) )  ;
    }
}

#---------------------------------------------------------------------
# Section 3.4 - Soap-Opera domain
#---------------------------------------------------------------------

∀Y   ( rich(Y) ∧ man(Y)     ⊃ loves(Y,jane) )  ;
∀Y   ( woman(Y) ∧ Y <> jane ⊃ loves(Y,john) )  ;
∀X,Y ( loves(X,Y)           ⊃ ￢blackMails(X,Y) )  ;
loves(jane, john) ∨ loves(jane, jim)  ;
∃X   ( adult(X) ∧ blackMails(X, john) )  ;

#---------------------------------------------------------------------
# Section 3.5
#---------------------------------------------------------------------

∀X   ( man(X)         ⊃ ￢woman(x)            ) ;  # Disjointness
∀X   ( surgeon(X)     ⊃ doctor(X)             ) ;  # Subtypes
∀X   ( adult(X)       ⊃ man(X) ∨ woman(X)     ) ;  # Exhaustiveness
∀X,Y ( marriedTo(X,Y) ⊃ marriedTo(Y,X)        ) ;  # Symmetry
∀X,Y ( parentOf(X,Y)  ⊃ childOf(Y,X)          ) ;  # Inverse
∀X,Y ( marriedTo(X,Y) ⊃ person(X) ∧ person(Y) ) ;  # Type restriction
∀X   ( richMan(X)     ≡ rich(X) ∧ man(X)      ) ;  # Full definition

#---------------------------------------------------------------------
# Section 5.2.1
#---------------------------------------------------------------------
# append(A,B,C) means A concatenated with B is C  ;
#---------------------------------------------------------------------

∀A,B,C   ( append(A,B,C) ∧ C=B      ⊂  A=[] )  ;
∀X,A,B,C ( append([X|A], B, [X|C])  ⊂  append(A,B,C) )  ;

∀A,B,C   (          A=[]  ⊃  append(A,B,C) ∧ C = B )  ;
∀X,A,B,C ( append(A,B,C)  ⊃  append([X|A], B, [X|C]) )  ;

#---------------------------------------------------------------------
# Section 6.1, 6.2
#---------------------------------------------------------------------
# Facts about Family
# mother(M,X)      - M is mother of X
# father(F,X)      - F is father of X
# child(C,X)       - C is child of X
# parent(P,X)      - P is parent of X
# grandparent(G,X) - G is grand parent of X
# ancestor(A,X)    - A is ancestor of X
#---------------------------------------------------------------------

∀P,X   ( parent(P,X)  ⊂  mother(P,X) )  ;
∀P,X   ( parent(P,X)  ⊂  father(P,X) )  ;

∀G,P   ( grandparent(G,X)  ⊂  parent(G,P) ∧ parent(P,X) )  ;

∀A,B   ( ancestor(A,B)  ⊂  parent(A,B) )  ;
∀A,X,B ( ancestor(A,B)  ⊂  parent(A,X) ∧ ancestor(X,B) )  ;

#-- another version
∀A,B   ( ancestor2(A,B)  ⊂  parent(A,B) )  ;
∀A,X,B ( ancestor2(A,B)  ⊂  parent(X,B) ∧ ancestor2(A,X) )  ;

#-- yet another version
∀A,B   ( ancestor3(A,B)  ⊂  parent(A,B) )  ;
∀A,X,B ( ancestor3(A,B)  ⊂  ancestor3(A,X) ∧ ancestor3(X,B) )  ;

#---------------------------------------------------------------------
# Section 6.3
#---------------------------------------------------------------------
# Fibonacci number
# fib(N,V) means Nth Fibonacci number is V
#---------------------------------------------------------------------

∀N ∀V    ( fib(N,V)     ⊂  N=0 ∧ V=1             )  ;
∀N ∀V    ( fib(N,V)     ⊂  N=1 ∧ V=1             )  ;
∀N ∀U ∀V ( fib(N+2,U+V) ⊂  fib(N,U) ∧ fib(N+1,V) )  ;

#---------------------------------------------------------------------
# Fibonacci using succesor function and plus predicate
#---------------------------------------------------------------------

∀N,V     ( fib(N,V)       ⊂ N=0 ∧ V=1 )  ;
∀N,V     ( fib(N,V)       ⊂ N=1 ∧ V=1 )  ;
∀N,U,V,W ( fib(s(s(N)),W) ⊂ fib(N,U) ∧ fib(s(N),V) ∧ plus(U,V,W) )  ;

#---------------------------------------------------------------------
# plus(A,B,C) means A + B = C,
#  which is computed from plus((A-1),(B+1),C)  ;
#---------------------------------------------------------------------

∀A,B,C ( plus(A,B,C) ∧ C=B  ⊂ A=0 )  ;
∀A,B,C ( plus(s(A),B,C)     ⊂ plus(A,s(B),C) )  ;

#---------------------------------------------------------------------
# Section 6.5
#---------------------------------------------------------------------
# power(A,B,C)    - A^B   = C  ;
# multiply(A,B,C) - A * B = C  ;
# plus(A,B,C)     - A + B = C  ;
#---------------------------------------------------------------------

∀N power(0,N,1)  ;
∀A,N,V ( power(A,N,V)   ⊂  even(N)     ∧ power(A*A,N/2,V) )  ;
∀A,N,V ( power(A,N,A*V) ⊂  not even(N) ∧ power(A*A,(N-1)/2,V) )  ;

#---------------------------------------------------------------------
# Section 6.6
#---------------------------------------------------------------------

∀G,X   ( grandparent(G,X)  ⊂ parent(G,P) ∧ parent(P,X) )  ;

∀X,Y,Z ( cousin(X,Y)       ⊂ ￢(X = Y) ∧
                                not sibling(X,Y) ∧
                                grandparent(Z,X) ∧
                                grandparent(Z,Y)
       )  ;

∀X,Y  ( americanCousin(X,Y)  ⊂  cousin(X,Y) ∧ american(X) )  ;

#---------------------------------------------------------------------
# Section 6.7 -- Negation
#---------------------------------------------------------------------

∀N ( composite(N)  ⊂  N > 1 ∧ ￢prime(N) )  ;

#---------------------------------------------------------------------
# End
#---------------------------------------------------------------------
